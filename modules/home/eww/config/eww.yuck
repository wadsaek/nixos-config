(defwindow powermenu
  :monitor '["<primary>", 0]'
  :stacking "overlay"
  :exclusive false
  :focusable true
  :namespace "top"
  :geometry (geometry
              ;:y "-3.8%"
              :width "100%"
              :height "100%"
              :anchor "top right")
  (powermenu_layout))

(defwidget powermenu_layout []
  (box :class "pm-layout-box" :space-evenly false :orientation "vertical"
    :style "background-image: url('./wallpaper')"
    (box :valign "start" :space-evenly false :spacing 25
     (_pm_sundial)
     (_pm_battery :status {EWW_BATTERY.BAT0.status}
                  :battery {EWW_BATTERY.BAT0.capacity}
                  :charge "󰂄" :full "󰁹"
                  :zero "󰂎" :one "󰁺" 
                  :two "󰁻" :three "󰁼"
                  :four "󰁽" :five "󰁾"
                  :six "󰁿" :seven "󰂀"
                  :eight "󰂁" :nine "󰂂")
    (_pm_network :strength net :offline "󰯡" :excellent "󰣺" :good "󰣸"
                :okay "󰣶" :slow "󰣴")
    (label :text "|" :class "pm-sep")
    (button :onclick "eww close powermenu -c ${EWW_CONFIG_DIR}"
            :class "pm-close-btn" "󰅖"))
  (box :space-evenly false :hexpand true :vexpand true
    (box :spacing 15 :class "pm-tm-box" :space-evenly false :valign "end" 
         :halign "start"
      (label :text "󱇻")
      (label :text "${time.hour}:${time.min}"))
    (_pm_buttons :shutdown "shutdown now" :reboot "reboot" 
                 :logout "hyprctl dispatch exit" 
                 :sleep "hyprlock & systemctl suspend"
                 :shutdown_icon "󰐥" :reboot_icon "" 
                 :logout_icon "󰍃" :sleep_icon "󰤄"))))

(defpoll time :interval "5s"
  :initial `date +'{"hour":"%H","min":"%M"}'`
  `date '+{"hour":"%H","min":"%M"}'`)

(defpoll net :interval "20s"
  :initial "N/A"
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
    | awk -F':' '{if($2=="yes")print$1}'`)

(defwidget _pm_buttons [sleep sleep_icon
                        shutdown shutdown_icon
                        reboot reboot_icon
                        logout logout_icon]
  (box :class "pm-btns-box" :spacing 5
    :vexpand true :hexpand true
    :valign "end" :halign "end"
    :space-evenly false
    (button :onclick sleep sleep_icon)
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

(defwidget _pm_network [strength 
                        offline slow okay good excellent]
  (box :class "pm-net-box"
        :space-evenly false
        :spacing 8
    (label :text {strength == "" ? offline :
                    strength <26 ? slow :
                      strength < 51 ? okay :
                        strength < 76 ? good : excellent})))

(defwidget _pm_battery [battery status zero one two three
                    four five six seven eight nine full charge]
  (box :class "pm-bat-box" :space-evenly false :spacing 8
    (label :text {status == 'Charging' ? charge :
      battery < 5 ? zero:
        battery < 10 ? one :
          battery < 20 ? two :
            battery < 30 ? three :
              battery < 40 ? four :
                battery < 50 ? five :
                  battery < 60 ? six : 
                    battery < 70 ? seven : 
                      battery < 80 ? eight :
                        battery < 90 ? nine : full})))

(defwidget _pm_sundial []
  (label :class "pm-sundial" :halign "end" :hexpand true
    :text { time.hour < 6 || time.hour > 22 ? "Night already, huh?" : 
              time.hour <8 ? "Up already?" : 
                time.hour < 12 ? "Good morning, Esthy <3" :
                  time.hour < 16 ? "Afternoon" :
                    time.hour < 19 ? "Early evening" : "Late evening"}))

(defwindow verbar
  :monitor "0"
  :geometry (geometry
              :width "2%"
              :height "80%"
              :anchor "left center")
  :stacking "fg"
  :exclusive true
  (verbar_layout))

(defwidget verbar_layout []
  (box :orientation "v" :class "verbar-box"
    (box :orientation "v" :class "verbar-time"
                          :spacing 0
                          :space-evenly false
     (label :text "${time.hour}")
     (label :text "${time.min}")
    )
    "b" 
    "c" ))

(defwindow runner
  :monitor "0"
  :stacking "fg"
  :focusable true
  :geometry (geometry
              :width "40%"
              :height "5%"
              :anchor "top center")
  (runner_layout))

(defwidget runner_layout[]
  (input 
    :onchange ""))
